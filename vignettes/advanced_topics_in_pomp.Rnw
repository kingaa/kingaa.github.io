\documentclass[10pt,reqno,final,pdftex]{amsart}
%\VignetteIndexEntry{Advanced topics in pomp}
%\VignetteEngine{knitr::knitr}
\usepackage{times}
\usepackage[utf8]{inputenc}
\usepackage{graphicx}
\usepackage[round]{natbib}
\usepackage{paralist}
\usepackage{float}
\usepackage[colorlinks=true,urlcolor=blue,citecolor=blue,linkcolor=blue,pagecolor=blue]{hyperref}

\setlength{\textwidth}{6.25in}
\setlength{\textheight}{8.75in}
\setlength{\evensidemargin}{0in}
\setlength{\oddsidemargin}{0in}
\setlength{\topmargin}{-0.35in}
\setlength{\parskip}{0.1in}  
\setlength{\parindent}{0.0in}  
\setcounter{secnumdepth}{1}
\setcounter{tocdepth}{1}

\floatstyle{ruled}
\newfloat{textbox}{t}{tbx}
\floatname{textbox}{Box}

\newcommand{\code}[1]{\texttt{#1}}
\newcommand{\pkg}[1]{\textsf{#1}}
\newcommand{\R}{\textsf{R}}
\newcommand{\expect}[1]{\mathbb{E}\left[#1\right]}
\newcommand{\dlta}[1]{{\Delta}{#1}}

\title[Advanced topics in pomp]{Advanced topics in pomp}
\hypersetup{pdftitle={Advanced topics in pomp}}

\author[A. A. King]{Aaron A. King}

\address{
  A. A. King,
  Departments of Ecology \& Evolutionary Biology and Mathematics, 
  University of Michigan, 
  Ann Arbor, Michigan
  48109-1048 USA
}

\email{kingaa at umich dot edu} 

\urladdr{http:pomp.r-forge.r-project.org}

\date{\today, \pkg{pomp}~version~\Sexpr{packageDescription("pomp",fields="Version")}}


<<include=FALSE>>=
opts_chunk$set(
               echo=TRUE,results='markup',
               progress=TRUE,prompt=FALSE,tidy=FALSE,highlight=FALSE,
               print=FALSE,keep.source=TRUE,comment='##',
               size='normalsize',background="#FFFFFF",
               warning=FALSE,message=FALSE,error=FALSE,
               dev='png',
               fig.path='figure/adv-',fig.lp="fig:",
               fig.align='left',fig.show='asis',
               fig.height=6,fig.width=8,
               dpi=150,
               dev.args=list(
                 bg='transparent',
                 pointsize=10
                 )
               )

@


\begin{document}

\thispagestyle{empty}

\maketitle

\tableofcontents

<<include=FALSE>>=
  library(pomp)
  set.seed(5384959)
@ 

\section{Accumulator variables}

Recall the SIR example discussed in the ``Introduction to \pkg{pomp}'' vignette.
In this example, the data consist of reported cases, which are modeled as binomial draws from the true number of recoveries having occurred since the last observation.
In particular, suppose the zero time for the process is $t_0$ and let $t_1, t_2, \dots, t_n$ be the times at which the data $y_1, y_2, \dots, y_n$ are recorded.
Then the $k$-th observation $y_k = C(t_{k-1},t_{k})$ is the observed number of cases in time interval $[t_{k-1},t_{k})$.
If $\Delta_{I{\to}R}(t_{k-1},t_{k})$ is the accumulated number of recoveries (I to R transitions) in the same interval, then the model assumes
\begin{equation*}
  y_{k}=C(t_{k-1},t_{k})\;\sim\;\mathrm{binomial}({\Delta}_{I{\to}R}(t_{k-1},t_{k}),\rho)
\end{equation*}
where $\rho$ is the probability a given case is actually recorded.

Now, it is easy to keep track of the cumulative number of recoveries when simulating the continuous-time SIR state process; 
one simply has to add each recovery to an accumulator variable when it occurs.
The SIR simulator codes in the ``Introduction to \pkg{pomp}'' vignette do this, storing the cumulative number of recoveries in a state variable \code{cases}, so that at any time $t$,
\begin{equation*}
  \mathtt{cases}(t) = \text{cumulative number of recoveries having occurred in the interval $[t_0,t)$}.
\end{equation*}
It follows that $\Delta_{I{\to}R}(t_{k-1},t_{k})=\mathtt{cases}(t_{k})-\mathtt{cases}(t_{k-1})$.
Does this not violate the Markov assumption upon which all the algorithms in \pkg{pomp} are based?
Not really.
Straightforwardly, one could augment the state process, adding $\mathtt{cases}(t_{k-1})$ to the state vector at time $t_k$.
The state process would then become a \emph{hybrid} process, with one component (the $S$, $I$, $R$, and $\mathtt{cases}$ variables) evolving in continuous time, while the retarded $\mathtt{cases}$ variable would update discretely.

It would, of course, be relatively easy to code up the model in this way, but because the need for accumulator variables is so common, \pkg{pomp} provides an easier work-around.
Specifically, in the \code{pomp}-object constructing call to \code{pomp}, any variables named in the \code{zeronames} argument are assumed to be accumulator variables.
At present, however, only the \code{rprocess} plug-ins and the deterministic-skeleton trajectory codes take this into account;
setting \code{zeronames} will have no effect on custom \code{rprocess} codes.

\clearpage
\section{Incorporating native codes using \code{pompBuilder}}

It's possible to use native codes for \code{dprocess} and for the measurement model portions of the \code{pomp} as well.
In the ``Introduction to pomp'' vignette, we looked at the SIR model, which we implemented using an Euler-multinomial approximation to the continuous-time Markov process.
Here, we implement a similar model using native C codes.
The new, and still experimental, \code{pompBuilder} function helps us do this.

We'll start by writing snippets of C code to implement each of the important parts of our model.
First, we encode a negative binomial measurement model.
<<pomp-builder-measmod,eval=T>>=
## negative binomial measurement model
## E[cases|incid] = rho*incid
## Var[cases|incid] = rho*incid*(1+rho*incid/theta)
rmeas <- '
  cases = rnbinom_mu(theta,rho*incid);
'

dmeas <- '
  lik = dnbinom_mu(cases,theta,rho*incid,give_log);
'
@ 

Next the function that takes one Euler step.
<<pomp-builder-stepfn,eval=T>>=
## SIR process model with extra-demographic stochasticity
## and seasonal transmission
step.fn <- '
  int nrate = 6;
  double rate[nrate];		// transition rates
  double trans[nrate];		// transition numbers
  double beta;			// transmission rate
  double dW;			// white noise increment
  int k;

  // seasonality in transmission
  beta = beta1*seas1+beta2*seas2+beta3*seas3;

  // compute the environmental stochasticity
  dW = rgammawn(beta_sd,dt);

  // compute the transition rates
  rate[0] = mu*popsize;		// birth into susceptible class
  rate[1] = (iota+beta*I*dW/dt)/popsize; // force of infection
  rate[2] = mu;			// death from susceptible class
  rate[3] = gamma;		// recovery
  rate[4] = mu;			// death from infectious class
  rate[5] = mu; 		// death from recovered class

  // compute the transition numbers
  trans[0] = rpois(rate[0]*dt);	// births are Poisson
  reulermultinom(2,S,&rate[1],dt,&trans[1]);
  reulermultinom(2,I,&rate[3],dt,&trans[3]);
  reulermultinom(1,R,&rate[5],dt,&trans[5]);

  // balance the equations
  S += trans[0]-trans[1]-trans[2];
  I += trans[1]-trans[3]-trans[4];
  R += trans[3]-trans[5];
  incid += trans[3];		// incidence is cumulative recoveries
  if (beta_sd > 0.0) W += (dW-dt)/beta_sd; // increment has mean = 0, variance = dt
'
@ 

Now the deterministic skeleton.
The ``D'' prepended to each state variable indicates the derivative of the state variable.
<<pomp-builder-skel,eval=T>>=
skel <- '
  int nrate = 6;
  double rate[nrate];		// transition rates
  double term[nrate];		// transition numbers
  double beta;			// transmission rate
  double dW;			// white noise increment
  int k;
  
  beta = beta1*seas1+beta2*seas2+beta3*seas3;

  // compute the transition rates
  rate[0] = mu*popsize;		// birth into susceptible class
  rate[1] = (iota+beta*I)/popsize; // force of infection
  rate[2] = mu;			// death from susceptible class
  rate[3] = gamma;		// recovery
  rate[4] = mu;			// death from infectious class
  rate[5] = mu; 		// death from recovered class

  // compute the several terms
  term[0] = rate[0];
  term[1] = rate[1]*S;
  term[2] = rate[2]*S;
  term[3] = rate[3]*I;
  term[4] = rate[4]*I;
  term[5] = rate[5]*R;

  // assemble the differential equations
  DS = term[0]-term[1]-term[2];
  DI = term[1]-term[3]-term[4];
  DR = term[3]-term[5];
  Dincid = term[3];		// accumulate the new I->R transitions
  DW = 0;
'
@ 

Next, we write snippets to perform parameter transformations.
Note the convention of prepending ``T'' to the name to signify the transformed parameter.
The log-barycentric transformation is very useful when dealing with parameters (such as our initial conditions) constrained to lie on a unit simplex.
<<pomp-builder-partrans,eval=T>>=
## parameter transformations
## note we use barycentric coordinates for the initial conditions
## the success of this depends on S0, I0, R0 being in
## adjacent memory locations, in that order
partrans <- "
  Tgamma = exp(gamma);
  Tmu = exp(mu);
  Tiota = exp(iota);
  Tbeta1 = exp(beta1);
  Tbeta2 = exp(beta2);
  Tbeta3 = exp(beta3);
  Tbeta_sd = exp(beta_sd);
  Trho = expit(rho);
  Ttheta = exp(theta);
  from_log_barycentric(&TS_0,&S_0,3);
"

paruntrans <- "
  Tgamma = log(gamma);
  Tmu = log(mu);
  Tiota = log(iota);
  Tbeta1 = log(beta1);
  Tbeta2 = log(beta2);
  Tbeta3 = log(beta3);
  Tbeta_sd = log(beta_sd);
  Trho = logit(rho);
  Ttheta = log(theta);
  to_log_barycentric(&TS_0,&S_0,3);
"
@ 

To model seasonality in transmission, we'll use periodic B-splines.
The following constructs a covariate table with three cubic, periodic B-spline basis functions.
<<pomp-builder-covar,eval=T>>=
covartab <- data.frame(
                       time=seq(from=-1/52,to=10+1/52,by=1/26)
                       )

covartab <- cbind(
                  covartab,
                  with(covartab,
                       periodic.bspline.basis(
                                              x=time,
                                              nbasis=3,
                                              degree=3,
                                              period=1,
                                              names="seas%d"
                                              )
                       )
                  )

@ 

A call to \code{pompBuilder} assembles the given codes, compiles them, and links them to the current \pkg{R} session.
<<pomp-builder,eval=F>>=
pompBuilder(
            name="SIR",
            data=data.frame(
              cases=NA,
              time=seq(0,10,by=1/52)
              ),
            times="time",
            t0=-1/52,
            dmeasure=dmeas,
            rmeasure=rmeas,
            step.fn=step.fn,
            step.fn.delta.t=1/52/20,
            skeleton.type="vectorfield",
            skeleton=skel,
            covar=covartab,
            tcovar="time",
            parameter.transform=partrans,
            parameter.inv.transform=paruntrans,
            statenames=c("S","I","R","incid","W"),
            paramnames=c(
              "gamma","mu","iota",
              "beta1","beta2","beta3","beta.sd",
              "popsize","rho","theta",
              "S.0","I.0","R.0"
              ), 
            zeronames=c("incid","W"),
            initializer=function(params, t0, ...) {
              x0 <- setNames(numeric(5),c("S","I","R","incid","W"))
              fracs <- params[c("S.0","I.0","R.0")]
              x0[1:3] <- round(params['popsize']*fracs/sum(fracs))
              x0
            }
            ) -> sir
@ 

<<pomp-builder-eval,echo=F,eval=T,results='hide'>>=
if (Sys.getenv("POMP_BUILD_VIGNETTES")=="yes") {
  require(pomp)
<<pomp-builder>>
}
@ 

Let's specify some parameters, simulate, and compute a deterministic trajectory:
<<sir-sim,eval=T>>=
coef(sir) <- c(
               gamma=26,mu=0.02,iota=0.01,
               beta1=400,beta2=480,beta3=320,
               beta.sd=0.001,
               popsize=2.1e6,
               rho=0.6,theta=10,
               S.0=26/400,I.0=0.001,R.0=1
               )

sir <- simulate(sir,seed=3493885L)
traj <- trajectory(sir,hmax=1/52)
@ 

\begin{figure}
<<sir-plot,fig=T,echo=F>>=
plot(sir)
@   
  \caption{Results of \code{plot(sir)}.}
  \label{fig:sir-plot}
\end{figure}

The C codes generated by the above are by default written into temporary files in the \R\ session's temporary directory.
Setting \code{pompBuilder}'s \code{save} option to \code{TRUE} will cause them to be stored in the current working directory.

\clearpage
\section{The low-level interface}

There is a low-level interface to \code{pomp} objects, primarily designed for package developers.
Ordinary users should have little reason to use this interface.
In this section, each of the methods that make up this interface will be introduced.

\subsection{Getting initial states}

The \code{init.state} method is called to initialize the state (unobserved) process.
It takes a vector or matrix of parameters and returns a matrix of initial states.
<<>>=
pompExample(ou2)
true.p <- coef(ou2)
x0 <- init.state(ou2)
x0
new.p <- cbind(true.p,true.p,true.p)
new.p["x1.0",] <- 1:3
init.state(ou2,params=new.p)
@ 

\subsection{Simulating the process model}

The \code{rprocess} method gives access to the process model simulator.
It takes initial conditions (which need not correspond to the zero-time \code{t0} specified when the \code{pomp} object was constructed), a set of times, and a set of parameters.
The initial states and parameters must be matrices, and they are checked for commensurability.
The method returns a rank-3 array containing simulated state trajectories, sampled at the times specified.
<<>>=
x <- rprocess(ou2,xstart=x0,times=time(ou2,t0=T),params=true.p)
dim(x)
x[,,1:5]
@ 
Note that the dimensions of \code{x} are \verb+nvars x nreps x ntimes+, where \code{nvars} is the number of state variables, \code{nreps} is the number of simulated trajectories (which is the number of columns in the \code{params} and \code{xstart} matrices), and \code{ntimes} is the length of the \code{times} argument.
Note also that \verb+x[,,1]+ is identical to \verb+xstart+.

\subsection{Simulating the measurement model}

The \code{rmeasure} method gives access to the measurement model simulator:
<<>>=
x <- x[,,-1,drop=F]
y <- rmeasure(ou2,x=x,times=time(ou2),params=true.p)
dim(y)
y[,,1:5]
@ 

\subsection{Process and measurement model densities}

The \code{dmeasure} and \code{dprocess} methods give access to the measurement and process model densities, respectively.
<<>>=
fp <- dprocess(ou2,x=x,times=time(ou2),params=true.p)
dim(fp)
fp[,36:40]
@ 
<<>>=
fm <- dmeasure(ou2,y=y[,1,],x=x,times=time(ou2),params=true.p)
dim(fm)
fm[,36:40]
@ 
All of these are to be preferred to direct access to the slots of the \code{pomp} object, because they do error checking on the inputs and outputs.

\section{Other examples}

There are a number of example \code{pomp} objects included with the package.
These can be found by running
<<all-examples,eval=F>>=
pompExample()
@ 
The \R\ scripts that generated these are included in the \code{examples} directory of the installed package.
Do
<<example-sources,eval=F>>=
list.files(system.file("examples",package="pomp"))
@ 
The majority of these use compiled code, which can be found in the package source.

In addition, there are several interactive demos that can be instructive.
<<demos,eval=F>>=
demo(package='pomp')
@ 
displays a list.

\section{Different methods of implementing \code{rprocess}: relative performance}

Here, we'll investigate various ways in which one might try to accelerate \code{rprocess}.
We'll write a vectorized version in \R\ code, then we'll see what the same thing looks like coded in C.
We'll compare these different versions in terms of their speed at simulation.
We'll also compare their performance against that of the plugins.

We'll use a discrete-time bivariate AR(1) process with normal measurement error as our example.
In this model, the state process $X_{t}\in\mathbb{R}^2$ satisfies
\begin{equation}\label{eq:ou-proc}
  X_{t} = \alpha\,X_{t-1}+\sigma\,\varepsilon_{t}.
\end{equation}
The measurement process is
\begin{equation}\label{eq:ou-obs}
  Y_{t} = \beta\,X_{t}+\tau\,\xi_{t}.
\end{equation}
In these equations, $\alpha$ and and $\beta$ are $2\times 2$ constant matrices.
$\xi_{t}$ and $\varepsilon_{t}$ are mutually-independent families of i.i.d.\ bivariate standard normal random variables.
$\sigma$ is a lower-triangular matrix such that $\sigma\sigma^T$ is the variance-covariance matrix of $X_{t+1}\vert X_{t}$.
We'll assume that each component of $X$ is measured independently and with the same error, $\tau$, so that the variance-covariance matrix of $Y_{t}\vert X_{t}$ has $\tau^2$ on the diagonal and zeros elsewhere.

An implementation of this model is included in the package as a \code{pomp} object;
load it by executing \code{pompExample(ou2)}.

\subsection{An unvectorized implementation using \R\ code only}
Before we set about vectorizing the codes, let's have a look at what a plug-in based implementation written entirely in \R\ might look like.
<<plugin-R-code,echo=T,eval=T>>=
pompExample(ou2)
ou2.dat <- as.data.frame(ou2)

pomp( 
     data=ou2.dat[c("time","y1","y2")],
     times="time",
     t0=0,
     rprocess=discrete.time.sim(
       step.fun=function (x, t, params, ...) {
         eps <- rnorm(n=2,mean=0,sd=1) # noise terms
         xnew <- c(
                   x1=params["alpha.1"]*x["x1"]+params["alpha.3"]*x["x2"]+
                       params["sigma.1"]*eps[1],
                   x2=params["alpha.2"]*x["x1"]+params["alpha.4"]*x["x2"]+
                       params["sigma.2"]*eps[1]+params["sigma.3"]*eps[2]
                   )
         names(xnew) <- c("x1","x2")
         xnew
       }
       )
     ) -> ou2.Rplug
@ 
<<plugin-R-code-sim,echo=T,eval=F>>=
simdat.Rplug <- simulate(ou2.Rplug,params=coef(ou2),nsim=5000,states=T)
@ 
<<plugin-R-code-eval,echo=F,eval=T>>=
binary.file <- "plugin-R-code.rda"
if (file.exists(binary.file)) {
  load(binary.file)
} else {
  tic <- Sys.time()
<<plugin-R-code-sim>>
  toc <- Sys.time()
  etime.Rplug <- toc-tic
  n.Rplug <- dim(simdat.Rplug)[2]
  save(etime.Rplug,n.Rplug,file=binary.file,compress='xz')
}
@ 
Notice how we specify the process model simulator using the \code{rprocess} plug-in \code{discrete.time.sim}.
The latter function's \code{step.fun} argument is itself a function that simulates one realization of the process for one timestep and one set of parameters.
When we vectorize the code, we'll do many realizations at once.

\subsection{Vectorizing the process simulator using \R\ code only}
Now, to write a vectorized \code{rprocess} in \R, we must write a function that simulates \code{nrep} realizations of the unobserved process.
Each of these realizations may start at a different point in state space and each may have a different set of parameters.
Moreover, this function must be capable of simulating the process over an arbitrary time interval and must be capable of reporting the unobserved states at arbitrary times in that interval.
We'll accomplish this by writing an \R\ function with arguments \code{xstart}, \code{params}, and \code{times}.
About these inputs, we must assume:
\begin{enumerate}
\item \code{xstart} will be a matrix, each column of which is a vector of initial values of the state process.
  Each state variable (matrix row) will be named.
\item \code{params} will be a matrix, the columns of which are parameter vectors.
  The parameter names will be in the matrix column-names.
\item \code{times} will be a vector of times at which realizations of the state process are required.
  We will have \code{times[k]} $\le$ \code{times[k+1]} for all indices \code{k}, but we cannot assume that the entries of \code{times} will be unique.
\item The initial states \code{xstart} are assumed to obtain at time \code{times[1]}.
\end{enumerate}
This function must return a rank-3 array, which has the realized values of the state process at the requested times.
This array must have rownames.
Here is one implementation of such a simulator.
<<vectorized-R-code,eval=F>>=
ou2.Rvect.rprocess <- function (xstart, times, params, ...) {
  nrep <- ncol(xstart)                  # number of realizations
  ntimes <- length(times)               # number of timepoints
  ## unpack the parameters (for legibility only)
  alpha.1 <- params["alpha.1",]
  alpha.2 <- params["alpha.2",]
  alpha.3 <- params["alpha.3",]
  alpha.4 <- params["alpha.4",]
  sigma.1 <- params["sigma.1",]
  sigma.2 <- params["sigma.2",]
  sigma.3 <- params["sigma.3",]
  ## x is the array of states to be returned: it must have rownames
  x <- array(0,dim=c(2,nrep,ntimes))
  rownames(x) <- rownames(xstart)
  ## xnow holds the current state values
  x[,,1] <- xnow <- xstart
  tnow <- times[1]
  for (k in seq.int(from=2,to=ntimes,by=1)) {
    tgoal <- times[k]
    while (tnow < tgoal) {              # take one step at a time
      eps <- array(rnorm(n=2*nrep,mean=0,sd=1),dim=c(2,nrep))
      tmp <- alpha.1*xnow['x1',]+alpha.3*xnow['x2',]+
        sigma.1*eps[1,]
      xnow['x2',] <- alpha.2*xnow['x1',]+alpha.4*xnow['x2',]+
        sigma.2*eps[1,]+sigma.3*eps[2,]
      xnow['x1',] <- tmp
      tnow <- tnow+1
    }
    x[,,k] <- xnow
  }
  x
}
@
We can put this into a pomp object that is the same as \code{ou2.Rplug} in every way except in its \code{rprocess} slot by doing
<<vectorized-R-pomp,eval=F>>=
ou2.Rvect <- pomp(ou2.Rplug,rprocess=ou2.Rvect.rprocess)
@ 

Let's pick some parameters and simulate some data to see how long it takes this code to run.
<<theta,eval=F>>=
theta <- c(
           x1.0=-3, x2.0=4,
           tau=1,
           alpha.1=0.8, alpha.2=-0.5, alpha.3=0.3, alpha.4=0.9,
           sigma.1=3, sigma.2=-0.5, sigma.3=2
           )
@ 
<<vectorized-R-code-sim,eval=F,echo=T>>=
simdat.Rvect <- simulate(ou2.Rvect,params=theta,states=T,nsim=100000)
@ 
<<vectorized-R-code-eval,eval=T,echo=F>>=
binary.file <- "vectorized-R-code.rda"
if (file.exists(binary.file)) {
  load(binary.file)
} else {
<<vectorized-R-code>>
<<vectorized-R-pomp>>
<<theta>>
  tic <- Sys.time()
<<vectorized-R-code-sim>>
  toc <- Sys.time()
etime.Rvect <- toc-tic
units(etime.Rvect) <- units(etime.Rplug)
n.Rvect <- dim(simdat.Rvect)[2]
save(etime.Rvect,n.Rvect,file=binary.file,compress='xz')
}
@ 
Doing \Sexpr{n.Rvect} simulations of \code{ou2.Rvect} took \Sexpr{round(etime.Rvect,2)}~\Sexpr{units(etime.Rvect)}.
Compared to the \Sexpr{round(etime.Rplug,2)}~\Sexpr{units(etime.Rplug)} it took to run \Sexpr{n.Rplug} simulations of \code{ou2.Rplug}, this is a \Sexpr{round(as.numeric(etime.Rplug)*n.Rvect/as.numeric(etime.Rvect)/n.Rplug)}-fold speed-up.

\subsection{Accelerating the code using C: a plug-in based implementation}

As we've seen, we can usually acheive big accelerations using compiled native code.
A one-step simulator written in C for use with the \code{discrete.time.sim} plug-in is included with the package and can be viewed by doing
<<view-ou2-source,eval=F>>=
file.show(file=system.file("examples/ou2.c",package="pomp"))
@ 
The one-step simulator is in function \code{ou2\_step}.
Prototypes for the one-step simulator and other functions are in the \code{pomp.h} header file;
view it by doing
<<view-pomp.h,eval=F,results='hide'>>=
file.show(file=system.file("include/pomp.h",package="pomp"))
@ 
We can put the one-step simulator into the \code{pomp} object and simulate as before by doing
<<plugin-C-code,eval=F>>=
ou2.Cplug <- pomp(
                  ou2.Rplug,
                  rprocess=discrete.time.sim("ou2_step"),
                  paramnames=c(
                    "alpha.1","alpha.2","alpha.3","alpha.4",
                    "sigma.1","sigma.2","sigma.3",
                    "tau"
                    ),
                  statenames=c("x1","x2"),
                  obsnames=c("y1","y2")
                  )
<<plugin-C-sim,eval=F>>=
simdat.Cplug <- simulate(ou2.Cplug,params=theta,states=T,nsim=100000)
<<plugin-C-sim-eval,eval=T,echo=F>>=
binary.file <- "plugin-C-code.rda"
if (file.exists(binary.file)) {
  load(binary.file)
} else {
<<plugin-C-code>>
  tic <- Sys.time()
<<plugin-C-sim>>
  toc <- Sys.time()
etime.Cplug <- toc-tic
  n.Cplug <- dim(simdat.Cplug)[2]
units(etime.Cplug) <- units(etime.Rplug)
speedup <- as.numeric(etime.Rplug/n.Rplug)/as.numeric(etime.Cplug/n.Cplug)
save(n.Cplug,etime.Cplug,speedup,file=binary.file,compress='xz')
}
@ 
Note that \code{ou2\_step} is written in such a way that we must specify \code{paramnames}, \code{statenames}, and \code{obsnames}.
These \Sexpr{n.Cplug} simulations of \code{ou2.Cplug} took \Sexpr{round(etime.Cplug,2)}~\Sexpr{units(etime.Cplug)}.
This is a \Sexpr{round(speedup)}-fold speed-up relative to \code{ou2.Rplug}.


\subsection{A vectorized C implementation}

The function \code{ou2\_adv} is a fully vectorized version of the simulator written in C.
View this code by doing
<<eval=F,results='hide'>>=
<<view-ou2-source>>
@ 
This function is called in the following \code{rprocess} function.
Notice that the call to \code{ou2\_adv} uses the \verb+.C+ interface.
<<vectorized-C-code>>=
ou2.Cvect.rprocess <- function (xstart, times, params, ...) {
  nvar <- nrow(xstart)
  npar <- nrow(params)
  nrep <- ncol(xstart)
  ntimes <- length(times)
  array(
        .C("ou2_adv",
           X = double(nvar*nrep*ntimes),
           xstart = as.double(xstart),
           par = as.double(params),
           times = as.double(times),
           n = as.integer(c(nvar,npar,nrep,ntimes))
           )$X,
        dim=c(nvar,nrep,ntimes),
        dimnames=list(rownames(xstart),NULL,NULL)        
        )
}
@ 

The call that constructs the \code{pomp} object is:
<<vectorized-C-code-pomp>>=
ou2.Cvect <- pomp(
                  ou2.Rplug,
                  rprocess=ou2.Cvect.rprocess
                  )
paramnames <- c(
                "alpha.1","alpha.2","alpha.3","alpha.4",
                "sigma.1","sigma.2","sigma.3",
                "tau",
                "x1.0","x2.0"
                )
<<vectorized-C-code-sim,echo=T,eval=F>>=
simdat.Cvect <- simulate(ou2.Cvect,params=theta[paramnames],
                         nsim=100000,states=T)
@
<<vectorized-C-code-eval,echo=F,eval=T>>=
binary.file <- "vectorized-C-code.rda"
if (file.exists(binary.file)) {
  load(binary.file)
} else {
  tic <- Sys.time()
<<vectorized-C-code-sim>>
  toc <- Sys.time()
etime.Cvect <- toc-tic
  n.Cvect <- dim(simdat.Cvect)[2]
units(etime.Cvect) <- units(etime.Rplug)
speedup <- as.numeric(etime.Rplug/n.Rplug)/as.numeric(etime.Cvect/n.Cvect)
save(n.Cvect,etime.Cvect,speedup,file=binary.file,compress='xz')
}
@ 
Note that we've had to rearrange the order of parameters here to ensure that they arrive at the native codes in the right order.
Doing \Sexpr{n.Cvect} simulations of \code{ou2.Cvect} took \Sexpr{round(etime.Cvect,2)}~\Sexpr{units(etime.Cvect)}, a \Sexpr{round(speedup)}-fold speed-up relative to \code{ou2.Rplug}.

\end{document}
